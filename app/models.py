# generated by fastapi-codegen:
#   filename:  opin-api-modified.json
#   timestamp: 2024-01-20T06:01:36+00:00

from __future__ import annotations

from datetime import date
from enum import Enum
from typing import Optional

from pydantic import BaseModel, Field


class Vehicle(BaseModel):
    id: Optional[int] = None
    HP: Optional[float] = None
    KW: Optional[float] = None
    torque: Optional[float] = None
    evHP: Optional[float] = None
    evKW: Optional[float] = None
    evTorque: Optional[float] = None
    acceleration: Optional[float] = None
    vehicleTopSpeed: Optional[float] = None
    engineCapacity: Optional[float] = None
    modelYear: Optional[float] = None
    hasTractionEnabled: Optional[bool] = None
    hasImmobilizer: Optional[bool] = None
    hasTheftDetection: Optional[bool] = None
    currentMileageDynamic: Optional[float] = None
    yearlyMilageDynamic: Optional[float] = None
    highwayYearlyMilageDynamic: Optional[float] = None
    dailyMilageDynamic: Optional[float] = None
    serviceHistory: Optional[float] = None
    serviceDue: Optional[float] = None
    timeToService: Optional[float] = None
    recallHistory: Optional[float] = None
    tractionControlEngaged: Optional[bool] = None
    accelerationLongitudinal: Optional[float] = None
    accelerationLateral: Optional[float] = None
    accelerationVertical: Optional[float] = None
    brakingFrequency: Optional[float] = None
    brakePedalForce: Optional[float] = None
    brakePedalSpeed: Optional[float] = None
    performanceMode: Optional[float] = None
    emergencyBraking: Optional[float] = None
    engnitionOn: Optional[bool] = None
    engnitionOff: Optional[bool] = None
    ignitionOnTime: Optional[float] = None
    ignitionOffTime: Optional[float] = None
    logitude: Optional[float] = None
    latitude: Optional[float] = None
    altitude: Optional[float] = None
    heading: Optional[float] = None
    isMoving: Optional[bool] = None
    hornIsActive: Optional[bool] = None
    drivingSpeed: Optional[float] = None
    wheelSpin: Optional[float] = None
    decelrationRate: Optional[float] = None
    steeringSpeedTurn: Optional[float] = None
    laneDepartureWarnning: Optional[float] = None
    adasAbsIsActive: Optional[bool] = None
    obstacleDetectionIsActive: Optional[bool] = None
    driverIntervention: Optional[bool] = None
    obstacleDetectionWarning: Optional[str] = None
    speedSet: Optional[float] = None
    yaw: Optional[float] = None
    pitch: Optional[float] = None
    roll: Optional[float] = None
    gForce: Optional[float] = None
    trailerIncluded: Optional[bool] = None
    row1Pos1Isbelted: Optional[bool] = None
    row1Pos2Isbelted: Optional[bool] = None
    row2Pos1Isbelted: Optional[bool] = None
    row2Pos2Isbelted: Optional[bool] = None
    cabinTemp: Optional[float] = None
    cabinHumidity: Optional[float] = None
    tireConditionRow1Left: Optional[str] = None
    tireConditionRow1Right: Optional[str] = None
    tireConditionRow2Left: Optional[str] = None
    tireConditionRow2Right: Optional[str] = None
    tirePressureRow1Left: Optional[str] = None
    tirePressureRow1Right: Optional[str] = None
    tirePressureRow2Left: Optional[str] = None
    tirePressureRow2Right: Optional[str] = None
    brakePadWearRow1Left: Optional[str] = None
    brakePadWearRow1Right: Optional[str] = None
    brakePadWearRow2Left: Optional[str] = None
    brakePadWearRow2Right: Optional[str] = None
    brakesWearRow1Right: Optional[str] = None
    brakesWearRow1Left: Optional[str] = None
    brakeWearRow2Left: Optional[str] = None
    brakeWearRow2Right: Optional[str] = None
    clutchWear: Optional[float] = None
    dashboardWarnning: Optional[str] = None
    hasAirbagDeployed: Optional[bool] = None
    hasBrakesError: Optional[bool] = None
    engineWarning: Optional[str] = None
    KnownVehicleDamage: Optional[str] = None
    damagedParts: Optional[str] = None
    damagedPartsCost: Optional[float] = None
    upcomingService: Optional[date] = None
    occupiedSeats: Optional[int] = None
    childSeatOccupiesSeat: Optional[int] = None
    consentGranted: Optional[bool] = None
    plateNumber: Optional[str] = None
    registrationDate: Optional[date] = None
    countryOfRegistration: Optional[str] = None
    chassisNumber: Optional[str] = None
    vin: Optional[str] = None
    engineNumber: Optional[str] = None
    vehicleWeight: Optional[float] = None
    agencyRepair: Optional[bool] = None
    bodyType: Optional[str] = None
    fuelType: Optional[str] = None
    aiClassification: Optional[str] = None
    vehicleUse: Optional[bool] = None
    vehicleGarage: Optional[bool] = None
    vehicleBrand: Optional[str] = None
    vehicleModel: Optional[str] = None
    seats: Optional[int] = None
    colour: Optional[str] = None
    sumInsured: Optional[float] = None
    accessories: Optional[str] = None
    accessoryValue: Optional[str] = None
    co2Emissions: Optional[bool] = None
    automaticTransmission: Optional[bool] = None
    lefthandDrive: Optional[bool] = None
    doors: Optional[int] = None
    securityDevice: Optional[bool] = None
    modification: Optional[bool] = None
    digitalKeyUsed: Optional[bool] = None
    blueBadgeAdapted: Optional[bool] = None
    distanceUnit: Optional[str] = None
    pleasureDistance: Optional[float] = None
    businessDistance: Optional[float] = None
    currentMileage: Optional[int] = None
    yearlyMilage: Optional[int] = None


class Claim(BaseModel):
    claimType: Optional[str] = None
    location: Optional[str] = None
    lossCause: Optional[str] = None
    description: Optional[str] = None
    fnol: Optional[date] = None
    claimNumber: Optional[str] = None
    liabilityShare: Optional[float] = None
    reserve: Optional[float] = None
    claimStatus: Optional[str] = None
    lastUpdate: Optional[date] = None
    reopenDate: Optional[date] = None
    excessAmount: Optional[float] = None
    paymentMethod: Optional[str] = None
    documents: Optional[str] = None
    lossDate: Optional[date] = None


class Driver(BaseModel):
    name: Optional[str] = None
    gender: Optional[str] = None
    driverDOB: Optional[date] = None
    isPrimaryDriver: Optional[bool] = None
    licence: Optional[str] = None
    noClaimsDiscount: Optional[float] = None
    conviction: Optional[str] = None
    medicalConditon: Optional[str] = None
    loading: Optional[float] = None
    isBlueBadge: Optional[bool] = None
    nonMotorConviction: Optional[str] = None
    workStatus: Optional[str] = None
    occupation: Optional[str] = None


class MotorCoverage(BaseModel):
    policyNumber: Optional[str] = None
    inceptionDate: Optional[date] = None
    expiryDate: Optional[date] = None
    status: Optional[str] = None
    discountAmount: Optional[float] = None
    premiumRate: Optional[float] = None
    grossWrittenPremium: Optional[float] = None
    salesTax: Optional[float] = None
    brokeragePercentage: Optional[float] = None
    brokerageAmount: Optional[float] = None
    premiumPaymentFrequency: Optional[float] = None
    indemnityLimitPolicy: Optional[float] = None
    indemnityLimitAccident: Optional[float] = None
    isAgreedValue: Optional[bool] = None
    endorsementID: Optional[str] = None
    endorsementDate: Optional[date] = None
    endorsementType: Optional[str] = None
    peril: Optional[str] = None
    voluntaryDeductiblePercentage: Optional[float] = None
    voluntaryDeductibleAmount: Optional[float] = None
    compulsoryDeductiblePercentage: Optional[float] = None
    compulsoryDeductibleAmount: Optional[float] = None
    windscreenDeductiblePercentage: Optional[float] = None
    windscreenDeductibleAmount: Optional[float] = None
    distanceUnit: Optional[float] = None
    pleasureDistance: Optional[float] = None
    businessDistance: Optional[float] = None
    numberOfVehicles: Optional[float] = None


class InsuranceEntity(BaseModel):
    name: Optional[str] = None
    tradeName: Optional[str] = None
    type: Optional[str] = None
    classification: Optional[str] = None
    registrationNumber: Optional[str] = None
    yearEstablished: Optional[date] = None
    address: Optional[str] = None
    website: Optional[str] = None
    telephone: Optional[str] = None
    creditRating: Optional[str] = None
    developerPortal: Optional[str] = None
    productCatalog: Optional[str] = None
    vat: Optional[str] = None


class Personal(BaseModel):
    firstName: Optional[str] = None
    lastName: Optional[str] = None
    salutation: Optional[str] = None
    nationality: Optional[str] = None
    gender: Optional[str] = None
    dob: Optional[date] = None
    email: Optional[str] = None
    mobilePhone: Optional[str] = None
    phone: Optional[str] = None
    address: Optional[str] = None
    idType: Optional[str] = None
    idNumber: Optional[str] = None
    occupation: Optional[str] = None
    policyholderPreferredLanguage: Optional[str] = None


class Commercial(BaseModel):
    name: Optional[str] = None
    registeredAddress: Optional[str] = None
    dateFounded: Optional[date] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    occupation: Optional[str] = None
    preferredLanguage: Optional[str] = None
    registrationNumber: Optional[str] = None
    vat: Optional[str] = None


class Product(BaseModel):
    lineOfBusiness: Optional[str] = None
    productModel: Optional[str] = None
    contractType: Optional[str] = None
    gracePeriod: Optional[date] = None
    currency: Optional[str] = None
    policyWording: Optional[str] = None
    policyFee: Optional[float] = None
    premiumPaymentFrequency: Optional[float] = None
    profitShare: Optional[str] = None
    intermediary: Optional[str] = None


class Beneficiary(BaseModel):
    name: Optional[str] = None
    address: Optional[str] = None
    share: Optional[float] = None


class Receipt(BaseModel):
    receiptType: Optional[str] = None
    receiptDate: Optional[date] = None
    paymentAmount: Optional[float] = None
    receiptCalculation: Optional[str] = None
    premiumPaymentMethod: Optional[str] = None


class PremiumBordereau(BaseModel):
    treatyReference: Optional[str] = None
    policyholder: Optional[str] = None
    policyNumber: Optional[str] = None
    inceptionDate: Optional[date] = None
    expiryDate: Optional[date] = None
    indemnityLimitPolicy: Optional[float] = None
    grossWrittenPremium: Optional[float] = None
    netPremium: Optional[float] = None
    transactionType: Optional[str] = None


class ClaimsBordereau(BaseModel):
    treatyReference: Optional[str] = None
    policyholder: Optional[str] = None
    policyNumber: Optional[str] = None
    inceptionDate: Optional[date] = None
    expiryDate: Optional[date] = None
    indemnityLimitPolicy: Optional[float] = None
    claimNumber: Optional[str] = None
    fnol: Optional[date] = None
    dateOfLoss: Optional[date] = None
    causeOfLoss: Optional[str] = None
    claimant: Optional[str] = None
    GrosslLossReserve: Optional[float] = None
    excessAmount: Optional[float] = None
    expenseReserve: Optional[float] = None
    paid: Optional[float] = None
    expensesPaid: Optional[float] = None
    expectedRecovery: Optional[float] = None
    recoveryReceived: Optional[float] = None
    claimStatus: Optional[str] = None


class Address(BaseModel):
    building: Optional[str] = None
    streetName: Optional[str] = None
    city: Optional[str] = None
    state: Optional[str] = None
    country: Optional[str] = None
    postal_code: Optional[str] = None
    three_word_address: Optional[str] = None


class EntityType(Enum):
    reinsurance_company = 'reinsurance company'
    insurance_company = 'insurance company'
    takaful_reinsurance_comapny = 'takaful reinsurance comapny'
    takaful_insurance_company = 'takaful insurance company'
    mutual_insurance_company = 'mutual insurance company'
    peer_to_peer_insurance_company = 'peer-to-peer insurance company'
    Lloyds_syndicate = 'Lloyds syndicate'
    reinsurance_pool = 'reinsurance pool'
    captive_insurance_company = 'captive insurance company'
    decentralized_autonomous_organization = 'decentralized autonomous organization'
    insurance_broker = 'insurance broker'
    insurance_agent = 'insurance agent'
    managing_general_agent = 'managing general agent'
    insurance_introducer = 'insurance introducer'
    price_aggregator = 'price aggregator'
    insurance_prediction_market = 'insurance prediction market'
    other = 'other'


class EntityClassification(Enum):
    property_and_casualty_insurer = 'property and casualty insurer'
    life_insurer = 'life insurer'
    composite_insurer = 'composite insurer'
    other = 'other'


class ProductCatalog(Enum):
    property_fire_insurance = 'property fire insurance'
    burglary_insurance = 'burglary insurance'
    renters_insurance = 'renters insurance'
    home_and_content_insurance = 'home and content insurance'
    property_flood_insurance = 'property flood insurance'
    debris_removal_insurance = 'debris removal insurance'
    motor_comprehensive_insurance = 'motor comprehensive insurance'
    motor_third_party_liability_insurance = 'motor third party liability insurance'
    land_transit_insurance = 'land transit insurance'
    marine_cargo_insurance = 'marine cargo insurance'
    marine_hull_and_machinery_insurance = 'marine hull and machinery insurance'
    marine_protection_and_indemnity = 'marine protection and indemnity'
    carriers_liability_insurance = 'carriers liability insurance'
    medical_insurance = 'medical insurance'
    construction_all_risks_insurance = 'construction all risks insurance'
    engineering_contractor_plant_and_machinery_insurance = (
        'engineering contractor plant and machinery insurance'
    )
    electronic_equipment_insurance = 'electronic equipment insurance'
    equipment_breakdown_insurance = 'equipment breakdown insurance'
    decenial_liability_insurance = 'decenial liability insurance'
    deterioration_of_stock_insurance = 'deterioration of stock insurance'
    boiler_and_machinery_insurance = 'boiler and machinery insurance'
    glass_insurance = 'glass insurance'
    money_cash_in_transit_insurance = 'money cash in transit insurance'
    money_cash_in_safe_insurance = 'money cash in safe insurance'
    fidelity_guarantee_insurance = 'fidelity guarantee insurance'
    workers_compensation_insurance = 'workers compensation insurance'
    pet_insurance = 'pet insurance'
    bloodstock_insurance = 'bloodstock insurance'
    livestock_insurance = 'livestock insurance'
    personal_accident_insurance = 'personal accident insurance'
    term_life_insurance = 'term life insurance'
    whole_of_life_insurance = 'whole of life insurance'
    medical_malpractice_insurance = 'medical malpractice insurance'
    professional_indemnity_insurance = 'professional indemnity insurance'
    trade_credit_insurance = 'trade credit insurance'
    purchase_protection_insurance = 'purchase protection insurance'
    travel_insurance = 'travel insurance'
    legal_expense_insurance = 'legal expense insurance'
    cyber_liability_insurance = 'cyber liability insurance'
    business_interruption_insurance = 'business interruption insurance'
    directors_and_officers_insurance = 'directors and officers insurance'
    key_person_insurance = 'key person insurance'
    commercial_general_liability = 'commercial general liability'
    employers_liability_insurance = 'employers liability insurance'
    environmental_liability_insurance = 'environmental liability insurance'
    products_liability_insurance = 'products liability insurance'
    property_terrorism_and_sabotage_insurance = (
        'property terrorism and sabotage insurance'
    )
    business_owners_insurance = 'business owners insurance'
    errors_and_ommissions_insurance = 'errors and ommissions insurance'
    commercial_umbrella_insurance = 'commercial umbrella insurance'
    event_insurance = 'event insurance'
    passenger_liability_insurance__aviation_ = (
        'passenger liability insurance (aviation)'
    )
    ground_risk_hull_insurance__aviation_ = 'ground risk hull insurance (aviation)'
    in_flight_insurance__aviation_ = 'in-flight insurance (aviation)'
    roadside_assistance = 'roadside assistance'
    crop_insurance = 'crop insurance'
    drone_insurance = 'drone insurance'
    gap_insurance = 'gap insurance'
    green_card = 'green card'
    orange_card = 'orange card'
    Investment_Saving_Account__UK_market_related_ = (
        'Investment Saving Account (UK market related)'
    )
    pension = 'pension'
    endowment = 'endowment'
    annuity = 'annuity'
    wedding_ring_insurance = 'wedding ring insurance'


class Salutation(Enum):
    Mr_ = 'Mr.'
    Mrs_ = 'Mrs.'
    Ms_ = 'Ms.'


class Gender(Enum):
    male = 'male'
    female = 'female'
    other = 'other'


class DrivingLicence(BaseModel):
    licenceNumber: Optional[str] = None
    issueDate: Optional[date] = None
    expiryDate: Optional[date] = None
    country: Optional[str] = None
    licenceCategory: Optional[str] = None
    licenceCodes: Optional[str] = None


class IdType(Enum):
    passport = 'passport'
    national_id = 'national id'
    driving_licence = 'driving licence'
    national_insurance_number = 'national insurance number'
    other = 'other'


class ProductModel(Enum):
    conventional_annual_premium = 'conventional-annual premium'
    pay_as_you_drive = 'pay as you drive'
    pay_how_you_drive = 'pay how you drive'
    subscription__e_g__monthly_fee_ = 'subscription (e.g. monthly fee)'
    goverment_market_tarrif = 'goverment/market tarrif'
    other = 'other'


class ContractType(Enum):
    not_automated = 'not automated'
    smart_contract = 'smart contract'
    parametric = 'parametric'
    other = 'other'


class PolicyWording(BaseModel):
    name: Optional[str] = None


class Currency(Enum):
    fiat__ISO_4217_ = 'fiat (ISO-4217)'
    cryptocurrency_and_tokens__Non_ISO_4217_ = (
        'cryptocurrency and tokens (Non-ISO 4217)'
    )


class PaymentMethod(Enum):
    cash = 'cash'
    credit_card = 'credit card'
    cheque = 'cheque'
    electronic_transfer = 'electronic transfer'
    crypto_currency_or_tokens = 'crypto currency or tokens'


class PolicyStatus(Enum):
    in_force = 'in force'
    cancelled = 'cancelled'
    lapsed = 'lapsed'
    extended = 'extended'


class MotorPeril(Enum):
    liability_towards_third_parties = 'liability towards third parties'
    fire = 'fire'
    theft = 'theft'
    accidental_damage = 'accidental damage'
    windshield_damage = 'windshield damage'
    malicious_damage = 'malicious damage'
    terrorism_and_sabotage = 'terrorism and sabotage'
    flood = 'flood'
    earthquake = 'earthquake'
    volcanic_erruption = 'volcanic erruption'
    tsunami = 'tsunami'
    hail = 'hail'
    unkown_or_hit_and_run = 'unkown or hit and run'
    riots = 'riots'
    strikes = 'strikes'
    civil_commotion = 'civil commotion'
    war = 'war'


class Conviction(BaseModel):
    offenceDate: Optional[date] = None
    offenceCode: Optional[str] = None
    date: Optional[date] = None
    points: Optional[float] = None
    fine: Optional[float] = None
    fineCurrency: Optional[str] = None
    suspension: Optional[bool] = None
    suspensionLength: Optional[float] = None


class OffenceCode(Enum):
    AC10 = 'AC10'
    AC20 = 'AC20'
    AC30 = 'AC30'
    BA10 = 'BA10'
    BA30 = 'BA30'
    BA40 = 'BA40'
    BA60 = 'BA60'
    CD10 = 'CD10'
    CD20 = 'CD20'
    CD30 = 'CD30'
    CD40 = 'CD40'
    CD50 = 'CD50'
    CD60 = 'CD60'
    CD70 = 'CD70'
    CD80 = 'CD80'
    CD90 = 'CD90'
    CU10 = 'CU10'
    CU20 = 'CU20'
    CU30 = 'CU30'
    CU40 = 'CU40'
    CU50 = 'CU50'
    CU80 = 'CU80'
    DD10 = 'DD10'
    DD40 = 'DD40'
    DD60 = 'DD60'
    DD80___DD90___DR10___DR20___DR30___DR31___DR61___DR40___DR50___DR60___DR70___DG10___DG60___DR80___DG40___DR70___DR90___IN10___LC20___LC30___LC40___LC50___MS10___MS20___MS30___MS50___MS60___MS70___MS80___MS90___MW10___PC10___PC20___PC30___SP10___SP20___SP30___SP40___SP50___TS10___TS20___TS30___TS40___TS50___TS60___TS70___UT50___MR09___MR19___MR29___MR39___MR49___MR59 = 'DD80 - DD90 - DR10 - DR20 - DR30 - DR31 - DR61 - DR40 - DR50 - DR60 - DR70 - DG10 - DG60 - DR80 - DG40 - DR70 - DR90 - IN10 - LC20 - LC30 - LC40 - LC50 - MS10 - MS20 - MS30 - MS50 - MS60 - MS70 - MS80 - MS90 - MW10 - PC10 - PC20 - PC30 - SP10 - SP20 - SP30 - SP40 - SP50 - TS10 - TS20 - TS30 - TS40 - TS50 - TS60 - TS70 - UT50 - MR09 - MR19 - MR29 - MR39 - MR49 - MR59'


class MedicalCondition(BaseModel):
    notifiable_condition: Optional[str] = Field(None, alias='notifiable condition')
    status: Optional[str] = None
    medicalDVLARestriction: Optional[str] = None
    medicalTreatment: Optional[str] = None
    bypassOperation: Optional[bool] = None
    insulinInjected: Optional[bool] = None
    dailyInsulinUnits: Optional[float] = None


class Workstatus(Enum):
    self_employed = 'self employed'
    retired = 'retired'
    employed = 'employed'
    redundnt = 'redundnt'


class NotifiableConditionEnum(Enum):
    diabetes = 'diabetes'
    syncope = 'syncope'
    heart_condition = 'heart condition'
    sleep_aponea = 'sleep aponea'
    epilepsy = 'epilepsy'
    strokes = 'strokes'


class NotifiableCondition(BaseModel):
    __root__: Optional[NotifiableConditionEnum] = None


class Benefit(Enum):
    personal_accident = 'personal accident'
    replacement_vehicle = 'replacement vehicle'
    roadside_assisstance = 'roadside assisstance'


class PremiumPaymentFrequency(Enum):
    annual = 'annual'
    bi_annual = 'bi-annual'
    quarterly = 'quarterly'
    monthly = 'monthly'
    bi_monthly = 'bi-monthly'
    weekly = 'weekly'
    daily = 'daily'
    usage_based_or_on_demand = 'usage based or on demand'
    subscription__not_an_annual_contract_ = 'subscription (not an annual contract)'
    other = 'other'


class BodyType(Enum):
    motor_car = 'motor car'
    motorcycle = 'motorcycle'
    motorized_tricycle = 'motorized tricycle'
    electric_scooter = 'electric scooter'
    quadcycle = 'quadcycle'
    trailer_head = 'trailer head'
    van = 'van'
    bus = 'bus'
    tracktor = 'tracktor'
    pod = 'pod'
    motor_home = 'motor home'
    construction_equipment = 'construction equipment'


class FuelType(Enum):
    petrol = 'petrol'
    diesel = 'diesel'
    electric = 'electric'
    petrol_electric_hybrid = 'petrol/electric hybrid'
    gas = 'gas'
    hydrogen = 'hydrogen'


class AiClassification(Enum):
    level_0_autonomous_vehicle__SAE_standard_ = (
        'level 0 autonomous vehicle (SAE standard)'
    )
    level_1_autonomous_vehicle__SAE_standard_ = (
        'level 1 autonomous vehicle (SAE standard)'
    )
    level_2_autonomous_vehicle__SAE_standard_ = (
        'level 2 autonomous vehicle (SAE standard)'
    )
    level_3_autonomous_vehicle__SAE_standard_ = (
        'level 3 autonomous vehicle (SAE standard)'
    )
    level_4_autonomous_vehicle__SAE_standard_ = (
        'level 4 autonomous vehicle (SAE standard)'
    )
    level_5_autonomous_vehicle__SAE_standard_ = (
        'level 5 autonomous vehicle (SAE standard)'
    )


class VehicleUse(Enum):
    businees = 'businees'
    business_and_leisure = 'business and leisure'
    commercial = 'commercial'
    vehicle_sharing = 'vehicle sharing'
    vehicle_subscription = 'vehicle subscription'


class EndorsementType(Enum):
    addition_increase = 'addition/increase'
    deletion_decrease = 'deletion/decrease'
    policy_cancellation = 'policy cancellation'
    policy_extension = 'policy extension'
    policy_declaration = 'policy declaration'
    policy_transfer = 'policy transfer'
    policy_renewal = 'policy renewal'


class ReceiptType(Enum):
    new_policy = 'new policy'
    policy_renewal = 'policy renewal'
    mid_term_adjustment = 'mid term adjustment'
    claim_payment = 'claim payment'
    brokerage_payment = 'brokerage payment'
    profit_share_payment = 'profit share payment'
    other = 'other'


class ReceiptCalculation(Enum):
    pro_rata = 'pro rata'
    flat = 'flat'


class ClaimType(Enum):
    own_property_damage = 'own property damage'
    third_party_bodily_injury = 'third party bodily injury'
    third_party_property_damage = 'third party property damage'
    other = 'other'


class ClaimStatus(Enum):
    open = 'open'
    closed = 'closed'
    reopened = 'reopened'


class LegalEntity(Enum):
    sole_trader = 'sole trader'
    private_limited_company = 'private limited company'
    public_limited_company = 'public limited company'
    general_partnerships = 'general partnerships'
    limited_partnership = 'limited partnership'


class TradeCreditPeril(Enum):
    bankruptcy = 'bankruptcy'
    insolvency = 'insolvency'
    protracted_default = 'protracted default'
    political_risks = 'political risks'


class Pet(BaseModel):
    petName: Optional[str] = None
    address: Optional[str] = None
    petKind: Optional[str] = None
    age: Optional[float] = None
    purebred: Optional[bool] = None
    petBreed: Optional[str] = None
    size: Optional[float] = None
    description: Optional[str] = None
    reimbursement: Optional[float] = None


class PetBenefits(Enum):
    Veterinary_exam_fees = 'Veterinary exam fees'
    Hospitalization = 'Hospitalization'
    Surgeries = 'Surgeries'
    Injuries_and_illnesses = 'Injuries and illnesses'
    Cancer = 'Cancer'
    Specialty_and_emergency_vets = 'Specialty and emergency vets'
    Chronic_conditions = 'Chronic conditions'
    Hereditary_conditions = 'Hereditary conditions'
    X_rays__MRIs__CT_scans__ultrasounds = 'X-rays, MRIs, CT scans, ultrasounds'
    Diagnostic_testing = 'Diagnostic testing'
    Prescription_medication = 'Prescription medication'
    Prescribed_therapeutic_diets = 'Prescribed therapeutic diets'
    Prescribed_nutritional_supplements = 'Prescribed nutritional supplements'
    Dental_diseases = 'Dental diseases'
    Congenital_conditions = 'Congenital conditions'
    Blood_disorders = 'Blood disorders'
    Eye_disorders = 'Eye disorders'
    Musculoskeletal_disorders = 'Musculoskeletal disorders'
    Respiratory_conditions = 'Respiratory conditions'
    Behavioral_exam_and_treatment = 'Behavioral exam and treatment'
    Pre_existing_conditions = 'Pre-existing conditions'
    Boarding_grooming = 'Boarding/grooming'
    Cosmetic_procedures = 'Cosmetic procedures'
    Anal_gland_expression = 'Anal gland expression'
    Preventive_gastropexy = 'Preventive gastropexy'
    Vaccination_or_titer = 'Vaccination or titer'
    Heartworm_or_FeLV_FIV_test = 'Heartworm or FeLV/FIV test'
    Fecal_test = 'Fecal test'
    Deworming = 'Deworming'
    Microchip = 'Microchip'
    Health_certificate = 'Health certificate'
    Flea_control = 'Flea control'
    Heartworm_prevention = 'Heartworm prevention'
    Tick_control = 'Tick control'
    Dental_cleaning = 'Dental cleaning'
    Spay_or_neuter = 'Spay or neuter'
    Treatment_of_internal_and_external_parasites = (
        'Treatment of internal and external parasites'
    )
    Diagnostic_testing_1 = 'Diagnostic testing'


class PetBreed(Enum):
    Abyssinian_Sand_Terrier = 'Abyssinian Sand Terrier'
    Affenpinscher = 'Affenpinscher'
    Afghan_Hound = 'Afghan Hound'
    Airedale_Terrier = 'Airedale Terrier'
    Akbash = 'Akbash'
    Akita = 'Akita'
    Alapaha_Blue_Blood_Bulldog = 'Alapaha Blue Blood Bulldog'
    Alaskan_Husky = 'Alaskan Husky'
    Alaskan_Klee_Kai = 'Alaskan Klee Kai'
    Alaskan_Malamute = 'Alaskan Malamute'
    American_Bulldog = 'American Bulldog'
    American_Cocker_Spaniel = 'American Cocker Spaniel'
    American_English_Coonhound = 'American English Coonhound'
    American_Eskimo__Standard = 'American Eskimo- Standard'
    American_Eskimo_miniature = 'American Eskimo-miniature'
    American_Eskimo_teacup_Or_Toy = 'American Eskimo-teacup Or Toy'
    American_Foxhound = 'American Foxhound'
    American_Hairless_Terrier = 'American Hairless Terrier'
    American_Indian_Dog = 'American Indian Dog'
    American_Pit_Bull_Terrier = 'American Pit Bull Terrier'
    American_Staffordshire_Terrier = 'American Staffordshire Terrier'
    American_Staghound = 'American Staghound'
    American_Tundra_Shepherd = 'American Tundra Shepherd'
    American_Water_Spaniel = 'American Water Spaniel'
    Anatolian_Shepherd_Dog = 'Anatolian Shepherd Dog'
    Appenzeller_Sennenhunde = 'Appenzeller Sennenhunde'
    Australian_Cattle_Dog = 'Australian Cattle Dog'
    Australian_Cattle_Dog_blue_Heeler = 'Australian Cattle Dog-blue Heeler'
    Australian_Cattle_Dog_queensland_Heeler = 'Australian Cattle Dog-queensland Heeler'
    Australian_Kelpie = 'Australian Kelpie'
    Australian_Labradoodle = 'Australian Labradoodle'
    Australian_Shepherd = 'Australian Shepherd'
    Australian_Shepherd__Toy = 'Australian Shepherd- Toy'
    Australian_Shepherd_miniature = 'Australian Shepherd-miniature'
    Australian_Shepherd_teacup = 'Australian Shepherd-teacup'
    Australian_Terrier = 'Australian Terrier'
    Azawakh = 'Azawakh'
    Basenji = 'Basenji'
    Basset_Fauve_De_Bretagne = 'Basset Fauve De Bretagne'
    Basset_Hound = 'Basset Hound'
    Beagle = 'Beagle'
    Bearded_Collie = 'Bearded Collie'
    Beauceron = 'Beauceron'
    Bedlington_Terrier = 'Bedlington Terrier'
    Belgian_Groenendal = 'Belgian Groenendal'
    Belgian_Laekenois = 'Belgian Laekenois'
    Belgian_Malinois = 'Belgian Malinois'
    Belgian_Sheepdog = 'Belgian Sheepdog'
    Belgian_Tervuren = 'Belgian Tervuren'
    Bergamasco_Sheepdog = 'Bergamasco Sheepdog'
    Berger_Blanc_Suisse = 'Berger Blanc Suisse'
    Berger_Picard = 'Berger Picard'
    Bernese_Mountain_Dog = 'Bernese Mountain Dog'
    Bichon_Frise = 'Bichon Frise'
    Bichpoo = 'Bichpoo'
    Biewer_Terrier = 'Biewer Terrier'
    Black_And_Tan_Coonhound = 'Black And Tan Coonhound'
    Black_Mouth_Cur = 'Black Mouth Cur'
    Black_Russian_Terrier = 'Black Russian Terrier'
    Bloodhound = 'Bloodhound'
    Bluetick_Coonhound = 'Bluetick Coonhound'
    Boerboel = 'Boerboel'
    Boggle = 'Boggle'
    Bolognese = 'Bolognese'
    Border_Collie = 'Border Collie'
    Border_Terrier = 'Border Terrier'
    Borzoi = 'Borzoi'
    Boston_Terrier = 'Boston Terrier'
    Bouvier_Des_Flandres = 'Bouvier Des Flandres'
    Boxer = 'Boxer'
    Boykin_Spaniel = 'Boykin Spaniel'
    Bracco_Italiano = 'Bracco Italiano'
    Braque_Du_Bourbonnais = 'Braque Du Bourbonnais'
    Braque_Francais_Pyrenean = 'Braque Francais Pyrenean'
    Briard = 'Briard'
    Brittany_Spaniel = 'Brittany Spaniel'
    Brussels_Griffon = 'Brussels Griffon'
    Bull_Mastiff = 'Bull Mastiff'
    Cairn_Terrier = 'Cairn Terrier'
    Canaan_Dog = 'Canaan Dog'
    Cane_Corso = 'Cane Corso'
    Cardigan_Welsh_Corgi = 'Cardigan Welsh Corgi'
    Carolina_Dog = 'Carolina Dog'
    Catahoula_Leopard_Dog = 'Catahoula Leopard Dog'
    Catalonian_Sheepdog = 'Catalonian Sheepdog'
    Caucasian_Shepherd_Dog = 'Caucasian Shepherd Dog'
    Cavachon = 'Cavachon'
    Cavalier_King_Charles_Spaniel = 'Cavalier King Charles Spaniel'
    Cavapoo = 'Cavapoo'
    Central_Asian_Shepherd_Dog = 'Central Asian Shepherd Dog'
    Cesky_Terrier = 'Cesky Terrier'
    Chesapeake_Bay_Retriever = 'Chesapeake Bay Retriever'
    Chihuahua = 'Chihuahua'
    Chihuahua_longhaired = 'Chihuahua-longhaired'
    Chinese_Crested = 'Chinese Crested'
    Chinese_Crested_powderpuff = 'Chinese Crested-powderpuff'
    Chinese_Shar_pei = 'Chinese Shar-pei'
    Chinook = 'Chinook'
    Chow_Chow = 'Chow Chow'
    Cirneco_Dell_etna = 'Cirneco Dell\'etna'
    Clumber_Spaniel = 'Clumber Spaniel'
    Cockalier = 'Cockalier'
    Cockapoo = 'Cockapoo'
    Collie_rough = 'Collie-rough'
    Collie_smooth_coat = 'Collie-smooth-coat'
    Coton_De_Tulear = 'Coton De Tulear'
    Curly_coated_Retriever = 'Curly-coated Retriever'
    Czechoslovakian_Vlcak = 'Czechoslovakian Vlcak'
    Dachshund_miniature = 'Dachshund-miniature'
    Dachshund_standard = 'Dachshund-standard'
    Dalmatian = 'Dalmatian'
    Dandie_Dinmont_Terrier = 'Dandie Dinmont Terrier'
    Danish_Swedish_Farm_Dog = 'Danish Swedish Farm Dog'
    Doberman_Pinscher = 'Doberman Pinscher'
    Dogo_Argentine = 'Dogo Argentine'
    Dogue_De_Bordeaux = 'Dogue De Bordeaux'
    Dutch_Shepherd = 'Dutch Shepherd'
    English_Bull_Terrier_miniature = 'English Bull Terrier-miniature'
    English_Bull_Terrier_standard = 'English Bull Terrier-standard'
    English_Bulldog = 'English Bulldog'
    English_Cocker_Spaniel = 'English Cocker Spaniel'
    English_Foxhound = 'English Foxhound'
    English_Mastiff = 'English Mastiff'
    English_Pointer = 'English Pointer'
    English_Setter = 'English Setter'
    English_Shepherd = 'English Shepherd'
    English_Springer_Spaniel = 'English Springer Spaniel'
    English_Toy_Spaniel = 'English Toy Spaniel'
    Entlebucher_Mountain_Dog = 'Entlebucher Mountain Dog'
    Estrela_Mountain_Dog = 'Estrela Mountain Dog'
    Field_Spaniel = 'Field Spaniel'
    Fila_Brasileiro = 'Fila Brasileiro'
    Finnish_Hound = 'Finnish Hound'
    Finnish_Lapphund = 'Finnish Lapphund'
    Finnish_Spitz = 'Finnish Spitz'
    Flat_coated_Retriever = 'Flat-coated Retriever'
    Fourche_Terrier = 'Fourche Terrier'
    Fox_Terrier_smooth_Or_Wirehair = 'Fox Terrier-smooth Or Wirehair'
    French_Bulldog = 'French Bulldog'
    French_Spainiel__Epagneul_Francais_ = 'French Spainiel (Epagneul Francais)'
    German_Pinscher = 'German Pinscher'
    German_Shepherd = 'German Shepherd'
    German_Shorthaired_Pointer = 'German Shorthaired Pointer'
    German_Spitz = 'German Spitz'
    German_Wirehaired_Pointer = 'German Wirehaired Pointer'
    Glen_Of_Imaal_Terrier = 'Glen Of Imaal Terrier'
    Golden_Retriever = 'Golden Retriever'
    Goldendoodle = 'Goldendoodle'
    Goldendoodle_miniature = 'Goldendoodle-miniature'
    Gordon_Setter = 'Gordon Setter'
    Grand_Basset_Griffon_Vendeen = 'Grand Basset Griffon Vendeen'
    Great_Dane = 'Great Dane'
    Great_Pyrenees = 'Great Pyrenees'
    Greater_Swiss_Mountain_Dog = 'Greater Swiss Mountain Dog'
    Greek_Harehound = 'Greek Harehound'
    Greyhound = 'Greyhound'
    Harrier = 'Harrier'
    Havanese = 'Havanese'
    Hovawart = 'Hovawart'
    Ibizan_Hound = 'Ibizan Hound'
    Icelandic_Sheepdog = 'Icelandic Sheepdog'
    Irish_Red_And_White_Setter = 'Irish Red And White Setter'
    Irish_Setter = 'Irish Setter'
    Irish_Terrier = 'Irish Terrier'
    Irish_Water_Spaniel = 'Irish Water Spaniel'
    Irish_Wolfhound = 'Irish Wolfhound'
    Italian_Greyhound = 'Italian Greyhound'
    Jack_Russell_Terrier = 'Jack Russell Terrier'
    Japanese_Chin = 'Japanese Chin'
    Jindo = 'Jindo'
    Kai_Ken = 'Kai Ken'
    Karelian_Bear_Dog = 'Karelian Bear Dog'
    Keeshond = 'Keeshond'
    Kerry_Blue_Terrier = 'Kerry Blue Terrier'
    Kishu_Ken = 'Kishu Ken'
    Komondor = 'Komondor'
    Kuvasz = 'Kuvasz'
    Kyi_leo = 'Kyi-leo'
    Labradoodle = 'Labradoodle'
    Labradoodle_miniature = 'Labradoodle-miniature'
    Labrador_Retriever = 'Labrador Retriever'
    Lagotto_Romagnolo = 'Lagotto Romagnolo'
    Lakeland_Terrier = 'Lakeland Terrier'
    Lancashire_Heeler = 'Lancashire Heeler'
    Leonberger = 'Leonberger'
    Lhasa_Apso = 'Lhasa Apso'
    Lhasa_Poo = 'Lhasa Poo'
    Lowchen = 'Lowchen'
    Maltese = 'Maltese'
    Maltipoo = 'Maltipoo'
    Manchester_Terrier = 'Manchester Terrier'
    Maremma_Sheepdog = 'Maremma Sheepdog'
    Mastiff = 'Mastiff'
    Mi_ki = 'Mi-ki'
    Miniature_Pinscher = 'Miniature Pinscher'
    Mixed__Large_51_110_Lbs__ = 'Mixed (Large 51-110 Lbs.)'
    Mixed__Medium_31_50_Lbs__ = 'Mixed (Medium 31-50 Lbs.)'
    Mixed__Small_11_30_Lbs__ = 'Mixed (Small 11-30 Lbs.)'
    Mixed__Toy_0_10_Lbs__ = 'Mixed (Toy 0-10 Lbs.)'
    Mixed__X_Large_111_Lbs__Or_Greater_ = 'Mixed (X Large 111 Lbs. Or Greater)'
    Morkie = 'Morkie'
    Mountain_Cur = 'Mountain Cur'
    Mudi = 'Mudi'
    Munsterlander_large = 'Munsterlander-large'
    Munsterlander_small = 'Munsterlander-small'
    Neapolitan_Mastiff = 'Neapolitan Mastiff'
    Nederlandse_Kooikerhondje = 'Nederlandse Kooikerhondje'
    New_Zealand_Huntaway = 'New Zealand Huntaway'
    Newfoundland = 'Newfoundland'
    Norfolk_Terrier = 'Norfolk Terrier'
    Northern_Inuit_Dog = 'Northern Inuit Dog'
    Norwegian_Buhund = 'Norwegian Buhund'
    Norwegian_Elkhound = 'Norwegian Elkhound'
    Norwegian_Lundehund = 'Norwegian Lundehund'
    Norwich_Terrier = 'Norwich Terrier'
    Nova_Scotia_Duck_Tolling_Retriever = 'Nova Scotia Duck Tolling Retriever'
    Old_Danish_Pointing_Dog = 'Old Danish Pointing Dog'
    Old_English_Sheepdog = 'Old English Sheepdog'
    Olde_English_Bulldogge = 'Olde English Bulldogge'
    Otter_Hound = 'Otter Hound'
    Papillon = 'Papillon'
    Parson_Russell_Terrier = 'Parson Russell Terrier'
    Patterdale_Terrier = 'Patterdale Terrier'
    Peekapoo = 'Peekapoo'
    Pekingese = 'Pekingese'
    Pembroke_Welsh_Corgi = 'Pembroke Welsh Corgi'
    Perro_De_Presa_Canario = 'Perro De Presa Canario'
    Peruvian_Inca_Orchid = 'Peruvian Inca Orchid'
    Petit_Basset_Griffon_Vendeen = 'Petit Basset Griffon Vendeen'
    Pharaoh_Hound = 'Pharaoh Hound'
    Plott_Hound = 'Plott Hound'
    Polish_Lowland_Sheepdog = 'Polish Lowland Sheepdog'
    Polish_Tatra_Sheepdog = 'Polish Tatra Sheepdog'
    Pomeranian = 'Pomeranian'
    Pompoo = 'Pompoo'
    Poodle_miniature = 'Poodle-miniature'
    Poodle_standard = 'Poodle-standard'
    Poodle_teacup = 'Poodle-teacup'
    Poodle_toy = 'Poodle-toy'
    Portuguese_Podengo_large = 'Portuguese Podengo-large'
    Portuguese_Podengo_medium = 'Portuguese Podengo-medium'
    Portuguese_Podengo_small = 'Portuguese Podengo-small'
    Portuguese_Pointer = 'Portuguese Pointer'
    Portuguese_Water_Dog = 'Portuguese Water Dog'
    Pudelpointer = 'Pudelpointer'
    Pug = 'Pug'
    Puggle = 'Puggle'
    Puli = 'Puli'
    Pumi = 'Pumi'
    Pyrenean_Mastiff = 'Pyrenean Mastiff'
    Pyrenean_Shepherd = 'Pyrenean Shepherd'
    Rafeiro_Do_Alentejo = 'Rafeiro Do Alentejo'
    Rat_Terrier = 'Rat Terrier'
    Redbone_Coonhound = 'Redbone Coonhound'
    Rhodesian_Ridgeback = 'Rhodesian Ridgeback'
    Rottweiler = 'Rottweiler'
    Russian_Toy_Terrier = 'Russian Toy Terrier'
    Russian_Tsvetnaya_Bolonka = 'Russian Tsvetnaya Bolonka'
    Saint_Bernard = 'Saint Bernard'
    Saluki = 'Saluki'
    Samoyed = 'Samoyed'
    Sapsaree = 'Sapsaree'
    Sarplaninac = 'Sarplaninac'
    Schapendoes = 'Schapendoes'
    Schipperke = 'Schipperke'
    Schnauzer_giant = 'Schnauzer-giant'
    Schnauzer_miniature = 'Schnauzer-miniature'
    Schnauzer_standard = 'Schnauzer-standard'
    Schnoodle = 'Schnoodle'
    Scottish_Deerhound = 'Scottish Deerhound'
    Scottish_Terrier = 'Scottish Terrier'
    Sealyham_Terrier = 'Sealyham Terrier'
    Shetland_Sheepdog = 'Shetland Sheepdog'
    Shiba_Inu = 'Shiba Inu'
    Shichon = 'Shichon'
    Shih_Poo = 'Shih Poo'
    Shih_Tzu = 'Shih Tzu'
    Shikoku = 'Shikoku'
    Shiloh_Shepherd = 'Shiloh Shepherd'
    Siberian_Husky = 'Siberian Husky'
    Silken_Windhound = 'Silken Windhound'
    Silky_Terrier = 'Silky Terrier'
    Skye_Terrier = 'Skye Terrier'
    Sloughi = 'Sloughi'
    Slovensky_Cuvac = 'Slovensky Cuvac'
    Soft_Coated_Wheaten_Terrier = 'Soft Coated Wheaten Terrier'
    Spanish_Mastiff = 'Spanish Mastiff'
    Spanish_Water_Dog = 'Spanish Water Dog'
    Spinone_Italiano = 'Spinone Italiano'
    Spitz = 'Spitz'
    Stabyhoun = 'Stabyhoun'
    Staffordshire_Bull_Terrier = 'Staffordshire Bull Terrier'
    Sussex_Spaniel = 'Sussex Spaniel'
    Swedish_Lapphund = 'Swedish Lapphund'
    Swedish_Vallhund = 'Swedish Vallhund'
    Telomian = 'Telomian'
    Texas_Blue_Lacy = 'Texas Blue Lacy'
    Thai_Ridgeback = 'Thai Ridgeback'
    Tibetan_Mastiff = 'Tibetan Mastiff'
    Tibetan_Spaniel = 'Tibetan Spaniel'
    Tibetan_Terrier = 'Tibetan Terrier'
    Tosa__Japanese_Mastiff_ = 'Tosa (Japanese Mastiff)'
    Toy_Fox_Terrier = 'Toy Fox Terrier'
    Treeing_Tennessee_Brindle = 'Treeing Tennessee Brindle'
    Treeing_Walker_Coonhound = 'Treeing Walker Coonhound'
    Unknown = 'Unknown'
    Victorian_Bulldog = 'Victorian Bulldog'
    Vizsla = 'Vizsla'
    Weimaraner = 'Weimaraner'
    Welsh_Springer_Spaniel = 'Welsh Springer Spaniel'
    Welsh_Terrier = 'Welsh Terrier'
    West_Highland_White_Terrier = 'West Highland White Terrier'
    Whippet = 'Whippet'
    White_Shepherd = 'White Shepherd'
    Wirehaired_Pointing_Griffon = 'Wirehaired Pointing Griffon'
    Wolf_Hybrid_non_F1_Generation = 'Wolf Hybrid-non F1 Generation'
    Xoloitzcuintli_standard = 'Xoloitzcuintli-standard'
    Yorkiepoo = 'Yorkiepoo'
    Yorkshire_Terrier = 'Yorkshire Terrier'


class PetKind(Enum):
    cat = 'cat'
    dog = 'dog'
    bird = 'bird'
    exotic = 'exotic'
    rabbit = 'rabbit'


class DistanceUnit(Enum):
    km = 'km'
    mile = 'mile'


class PropertyType(Enum):
    Agriculture = 'Agriculture'
    Airport = 'Airport'
    AnimalShelter = 'AnimalShelter'
    Apartment = 'Apartment'
    ApartmentComplex = 'ApartmentComplex'
    Aquarium = 'Aquarium'
    Archive_Organization = 'Archive Organization'
    Automotive_Business = 'Automotive Business'
    Beach = 'Beach'
    Boat_Slip = 'Boat Slip'
    BoatTerminal = 'BoatTerminal'
    Bridge = 'Bridge'
    Bungalow = 'Bungalow'
    Business = 'Business'
    BusStation = 'BusStation'
    BusStop = 'BusStop'
    Cabin = 'Cabin'
    Campground = 'Campground'
    Cemetery = 'Cemetery'
    Chalet = 'Chalet'
    ChildCare = 'ChildCare'
    Condominium = 'Condominium'
    Crematorium = 'Crematorium'
    Deeded_Parking = 'Deeded Parking'
    Dentist = 'Dentist'
    Dry_Cleaning_Or_Laundry = 'Dry Cleaning Or Laundry'
    Duplex = 'Duplex'
    Educational_Organization = 'Educational Organization'
    Emergency_Service = 'Emergency Service'
    Employment_Agency = 'Employment Agency'
    Entertainment_Business = 'Entertainment Business'
    Event_Venue = 'Event Venue'
    Farm = 'Farm'
    Financial_Service = 'Financial Service'
    Fire_Station = 'Fire Station'
    Food_Establishment = 'Food Establishment'
    Gated_Residence_Community = 'Gated Residence Community'
    Government_Building = 'Government Building'
    Government_Office = 'Government Office'
    Hall_of_Residence = 'Hall of Residence'
    Health_and_Beauty_Business = 'Health and Beauty Business'
    Home_and_Construction_Business = 'Home and Construction Business'
    Hospital = 'Hospital'
    Hotel_or_Motel = 'Hotel or Motel'
    Industrial = 'Industrial'
    InternetCafe = 'InternetCafe'
    LegalService = 'LegalService'
    Library = 'Library'
    LodgingBusiness = 'LodgingBusiness'
    Maisonette = 'Maisonette'
    Manufactured_Home = 'Manufactured Home'
    Manufactured_On_Land = 'Manufactured On Land'
    MedicalBusiness = 'MedicalBusiness'
    Mixed_Use = 'Mixed Use'
    Mobile_Home = 'Mobile Home'
    MovieTheater = 'MovieTheater'
    Multi_Family = 'Multi Family'
    Museum = 'Museum'
    Music_Venue = 'Music Venue'
    Office = 'Office'
    Own_Your_Own = 'Own Your Own'
    Park = 'Park'
    Parking_Facility = 'Parking Facility'
    Performing_Arts_Theater = 'Performing Arts Theater'
    Place_of_Worship = 'Place of Worship'
    Playground = 'Playground'
    PoliceStation = 'PoliceStation'
    Professional_Service = 'Professional Service'
    PublicToilet = 'PublicToilet'
    Quadruplex = 'Quadruplex'
    RadioStation = 'RadioStation'
    Ranch = 'Ranch'
    Real_Estate_Agent = 'Real Estate Agent'
    Recycling_Center = 'Recycling Center'
    Residential_Caravan = 'Residential Caravan'
    Retail = 'Retail'
    RVPark = 'RVPark'
    Self_Storage = 'Self Storage'
    Shopping_Center = 'Shopping Center'
    Show_House = 'Show House'
    Single_Family_Residence = 'Single Family Residence'
    Sports_Activity_Location = 'Sports Activity Location'
    Stadium_or_Arena = 'Stadium or Arena'
    Stock_Cooperative = 'Stock Cooperative'
    Store = 'Store'
    Subway_Station = 'Subway Station'
    TaxiStand = 'TaxiStand'
    Television_Station = 'Television Station'
    Timeshare = 'Timeshare'
    Tourist_Information_Center = 'Tourist Information Center'
    Townhouse = 'Townhouse'
    Train_Station = 'Train Station'
    Travel_Agency = 'Travel Agency'
    Triplex = 'Triplex'
    Under_construction = 'Under construction'
    Warehouse = 'Warehouse'
    Zoo = 'Zoo'


class PropertyPeril(Enum):
    aircraft_or_parts_dropeed_thereof = 'aircraft or parts dropeed thereof'
    Avalanche = 'Avalanche'
    Burglary = 'Burglary'
    Burst_pipes_or_water_apparatus = 'Burst pipes or water apparatus'
    Civil_Commotions = 'Civil Commotions'
    Coastal_flood = 'Coastal flood'
    Cyclone = 'Cyclone'
    Earthquake = 'Earthquake'
    Earthquake_fire = 'Earthquake fire'
    Fire = 'Fire'
    Flood___Backing_up_of_Drains = 'Flood - Backing up of Drains'
    Flood___Non_Coastal = 'Flood - Non-Coastal'
    Freeze_or_Ice = 'Freeze or Ice'
    Ground_Water_flood = 'Ground Water flood'
    Hail = 'Hail'
    Hurricane = 'Hurricane'
    Landslide = 'Landslide'
    Lightning = 'Lightning'
    Mudslide = 'Mudslide'
    Rain = 'Rain'
    Reservoir_flood = 'Reservoir flood'
    Riots = 'Riots'
    River_flood = 'River flood'
    Run_off_flood = 'Run-off flood'
    Smoke = 'Smoke'
    Snow = 'Snow'
    Sprinler_leakage = 'Sprinler leakage'
    Strikes = 'Strikes'
    Strom = 'Strom'
    Subsidence = 'Subsidence'
    Tempest = 'Tempest'
    Terrorism = 'Terrorism'
    Tsunami = 'Tsunami'
    Typhoon = 'Typhoon'
    War = 'War'
    Weight_of_Snow = 'Weight of Snow'
    Wind_Storm = 'Wind Storm'


class WallConstruction(Enum):
    Aluminium = 'Aluminium'
    Asbestos = 'Asbestos'
    Brick = 'Brick'
    Bungaroosh = 'Bungaroosh'
    Clay_Lump_Adobe = 'Clay-Lump/Adobe'
    Clunch = 'Clunch'
    Cob_Construction = 'Cob Construction'
    Concrete = 'Concrete'
    Corrugated_Iron = 'Corrugated Iron'
    Essex_Construction = 'Essex Construction'
    Fibreglass_Construction = 'Fibreglass Construction'
    Flint = 'Flint'
    Glass = 'Glass'
    Lathe_And_Plaster = 'Lathe And Plaster'
    Metal = 'Metal'
    Mundic_Block = 'Mundic Block'
    Other = 'Other'
    Plastic = 'Plastic'
    Prefabricated_Building___Combustible_Materials = (
        'Prefabricated Building - Combustible Materials'
    )
    Prefabricated_Building___Non_Combustible_Materials = (
        'Prefabricated Building - Non Combustible Materials'
    )
    Standard_Construction = 'Standard Construction'
    Steel_Frame = 'Steel Frame'
    Steel_Frame_Brick = 'Steel Frame/Brick'
    Steel_Frame_Render_Or_Pebbledash = 'Steel Frame/Render Or Pebbledash'
    Steel_Frame_Tile = 'Steel Frame/Tile'
    Steel_Frame_Wood_Shiplap = 'Steel Frame/Wood Shiplap'
    Stone = 'Stone'
    Stramit_Construction = 'Stramit Construction'
    Straw_Bale = 'Straw Bale'
    Structurally_Insulated_Panels__SIPs_ = 'Structurally Insulated Panels (SIPs)'
    Timber = 'Timber'
    Timber_Frame = 'Timber Frame'
    Timber_Frame_Brick = 'Timber Frame/Brick'
    Timber_Frame_Lathe_And_Plaster = 'Timber Frame/Lathe And Plaster'
    Timber_Frame_Stone = 'Timber Frame/Stone'
    Timber_Frame_Timber = 'Timber Frame/Timber'
    Timber_Plaster = 'Timber/Plaster'
    Wattle_And_Daub_Construction = 'Wattle And Daub Construction'
    Woodwall = 'Woodwall'
    Woodwork_Construction = 'Woodwork Construction'


class RootConstruction(Enum):
    Aluminium = 'Aluminium'
    Asbestos = 'Asbestos'
    Asphalt = 'Asphalt'
    Concrete = 'Concrete'
    Copper = 'Copper'
    Corrugated_Iron = 'Corrugated Iron'
    Ethylene_Propylene_Diene_Monomer_EPDM = 'Ethylene Propylene Diene Monomer EPDM'
    Felt_On_Timber = 'Felt On Timber'
    Fibreglass = 'Fibreglass'
    Glass = 'Glass'
    Green_Roofs = 'Green Roofs'
    Lead = 'Lead'
    Metal = 'Metal'
    Other = 'Other'
    Plastic = 'Plastic'
    Polycarbonate = 'Polycarbonate'
    Reinforced_PVC = 'Reinforced PVC'
    Shingle = 'Shingle'
    Shingle___Asphalt = 'Shingle - Asphalt'
    Shingle___Pine_Spruce_Cedar = 'Shingle - Pine/Spruce/Cedar'
    Slate = 'Slate'
    Standard_Construction = 'Standard Construction'
    Stramit = 'Stramit'
    Thatch___Fibre = 'Thatch - Fibre'
    Thatch___Reed = 'Thatch - Reed'
    Tile = 'Tile'
    Timber = 'Timber'
    Turnerised = 'Turnerised'
    Woodwork_Construction = 'Woodwork Construction'
    Zinc = 'Zinc'


class ClaimsOccurrence(Enum):
    Claims_occurring = 'Claims occurring'
    Claims_made = 'Claims made'


class TypeBusinessInterruption(Enum):
    Business_Interruption = 'Business Interruption'
    Increased_Cost_of_Working__ICOW_ = 'Increased Cost of Working (ICOW)'
    Contingent_Loss_of_Profit = 'Contingent Loss of Profit'


class CyberCoverageCategories(Enum):
    Data_and_software_loss = 'Data and software loss'
    Breach_of_privacy = 'Breach of privacy'
    Incident_management_and_notification_costs = (
        'Incident management and notification costs'
    )
    Kidnap_and_Ransom__Extortion_ = 'Kidnap and Ransom (Extortion)'
    Business_interruption = 'Business interruption'
    Contingent_business_interruption = 'Contingent business interruption'
    Multi_media_laibilities__disparagement_ = 'Multi-media laibilities (disparagement)'
    Legal_and_defence_costs = 'Legal and defence costs'
    Reputational_damage = 'Reputational damage'
    Network_service_failure_liability = 'Network service failure liability'
    Errors_and_omissions = 'Errors and omissions'
    Professional_indemnity = 'Professional indemnity'
    Fidelity__fraud_and_Theft = 'Fidelity, fraud and Theft'
    Theft_of_intectual_property = 'Theft of intectual property'
    Physical_asset_damage = 'Physical asset damage'
    Compensation_to_injured_parties = 'Compensation to injured parties'
    Cyber_terrorism = 'Cyber terrorism'
    Fines_and_penalties = 'Fines and penalties'
    Directors_and_officers_liability = 'Directors and officers liability'
    General_liability = 'General liability'
    Environmental_damage = 'Environmental damage'


class TermLifeType(Enum):
    Term_life = 'Term life'
    Decreasing_term = 'Decreasing term'
    Renewable_term = 'Renewable term'


class TermLifeRiders(Enum):
    Accidental_death_benefit = 'Accidental death benefit'
    Total_permanent_disability = 'Total permanent disability'
    Total_and_partial_permanent_disability = 'Total and partial permanent disability'
    Critical_illness = 'Critical illness'
    Convertible_term = 'Convertible term'
